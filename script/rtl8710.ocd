#
# OpenOCD script for RTL8710
# Copyright (C) 2016 Rebane, rebane@alkohol.ee
#

source [find target/swj-dp.tcl]

if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
} else {
	set _CHIPNAME rtl8710
}

if { [info exists ENDIAN] } {
	set _ENDIAN $ENDIAN
} else {
	set _ENDIAN little
}

if { [info exists WORKAREASIZE] } {
	set _WORKAREASIZE $WORKAREASIZE
} else {
	set _WORKAREASIZE 0x800
}

if { [info exists CPUTAPID] } {
	set _CPUTAPID $CPUTAPID
} else {
	set _CPUTAPID 0x2ba01477
}

swj_newdap $_CHIPNAME cpu -irlen 4 -expected-id $_CPUTAPID

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME cortex_m -endian $_ENDIAN -chain-position $_TARGETNAME

$_TARGETNAME configure -work-area-phys 0x10001000 -work-area-size $_WORKAREASIZE -work-area-backup 0

adapter_khz 500
adapter_nsrst_delay 100

if {![using_hla]} {
	cortex_m reset_config sysresetreq
}

set rtl8710_flasher_firmware_ptr 0x10001000
set rtl8710_flasher_buffer 0x10008000
set rtl8710_flasher_buffer_size 262144
set rtl8710_flasher_sector_size 4096

array set rtl8710_flasher_code {
	0 0x4FF0E92D 1 0xB671B085 2 0x6B1A4B94 3 0x7240F042 4 0x69DA631A 5 0x7280F442
	6 0x22FF61DA 7 0x2120F8C3 8 0x2124F8C3 9 0x47984B8E 10 0x47984B8E 11 0x4B8E20AB
	12 0xF44F4798 13 0xBF003380 14 0xD1FC3B01 15 0x47A04C89 16 0x4B8920C1 17 0x47A04798
	18 0x47984B88 19 0x60184B88 20 0x4C8847A0 21 0x4E882700 22 0x68236027 23 0xD0FC2B00
	24 0x681B4B86 25 0xF8DFB95B 26 0xF8C88208 27 0x4D7D3000 28 0x4B7E47A8 29 0xF8C84798
	30 0x47A80000 31 0x4B7FE7EC 32 0x2B06681B 33 0x4D77D122 34 0x210147A8 35 0x4B7C202B
	36 0xB2C04798 37 0x70184B7B 38 0x4B7320B1 39 0x47A84798 40 0xF8DF2500 41 0xF04FA1F8
	42 0xF8DF0910 43 0x464A81F4 44 0x010AEB05 45 0x47C04628 46 0x2D403510 47 0x4D69D1F7
	48 0x20C147A8 49 0x47984B68 50 0xE7C547A8 51 0x681B4B6B 52 0xD10E2B01 53 0x47A84D63
	54 0xF8DF2006 55 0x47C0818C 56 0x47984B69 57 0x47C020C7 58 0x200447A8 59 0x47A847C0
	60 0x4B62E7B2 61 0x2B02681B 62 0x4D5AD10F 63 0x200647A8 64 0x8164F8DF 65 0x4B6047C0
	66 0x68304798 67 0x47984B5F 68 0x200447A8 69 0x47A847C0 70 0x4B58E79E 71 0x2B03681B
	72 0x4B50D11B 73 0xF8D64798 74 0x4B59B000 75 0xB18B681B 76 0xF8DF2500 77 0xF8DFA150
	78 0xF8DF9168 79 0x22108154 80 0x010AEB05 81 0x0005EB0B 82 0x351047C8 83 0x3000F8D8
	84 0xD8F442AB 85 0x47984B43 86 0x4B48E77E 87 0x2B04681B 88 0x4B40D12E 89 0x4B4A4798
	90 0x2B00681B 91 0xAF74F43F 92 0xF8DF2500 93 0xF8DFA11C 94 0x46BB90F0 95 0x2000F8DA
	96 0x0802EBC5 97 0x47C82006 98 0x47984B3F 99 0x46426830 100 0x7F80F5B8 101 0xF44FBF28
	102 0xB2927280 103 0x44294939 104 0x4B3C4428 105 0x4F2F4798 106 0x200447B8 107 0x47B847C8
	108 0x7580F505 109 0x3000F8DA 110 0xD8DF42AB 111 0xE74B465F 112 0x681B4B2E 113 0xD1452B05
	114 0x47984B26 115 0x681B4B30 116 0xF43F2B00 117 0x2500AF41 118 0x90C4F8DF 119 0x80B0F8DF
	120 0xA0A0F8DF 121 0x22106830 122 0x44284669 123 0xF8D847C8 124 0x1B400000 125 0xBF282810
	126 0xB3182010 127 0x300AF815 128 0xF89DB2DB 129 0x429A2000 130 0xF10DD116 131 0x44680301
	132 0xEBCE46EE 133 0xF10E0E05 134 0xF50E5E80 135 0xF10E4E00 136 0xE0060E1F 137 0x1B01F813
	138 0x2003F81E 139 0x4291B2D2 140 0x4298D102 141 0xE005D1F6 142 0x4A172301 143 0x4B0C6013
	144 0xE709601D 145 0x47984B07 146 0xF8D83510 147 0x42AB3000 148 0xE701D8C8 149 0x4A102301
	150 0xE6FD6013 151 0x40000200 152 0x100012BD 153 0x100014F5 154 0x1000140D 155 0x100013C9
	156 0x1000800C 157 0x10008000 158 0x10008010 159 0x10008004 160 0x10001371 161 0x10008020
	162 0x10001509 163 0x10001435 164 0x10008014 165 0x10001475 166 0x10008008 167 0x10008021
	168 0x10001305 169 0x6A534A04 170 0x030BF3C3 171 0xD0FA2B00 172 0xF8934B01 173 0x47700060
	174 0x40006000 175 0x6B1A4B10 176 0x7240F442 177 0x691A631A 178 0x0210F042 179 0xF8D3611A
	180 0xF02220C0 181 0xF8C30206 182 0xF8D320C0 183 0xF04220C0 184 0xF8C30201 185 0xF50320C0
	186 0x220043BC 187 0x62DA609A 188 0x61192101 189 0x61592102 190 0x61DA619A 191 0x477064DA
	192 0x40000200 193 0xB5F8B372 194 0x2A104617 195 0x2710BF28 196 0xF44F4B15 197 0x601A7240
	198 0x2203605F 199 0x2060F883 200 0x4207F3C0 201 0x2060F883 202 0x2207F3C0 203 0x2060F883
	204 0xF883B2C0 205 0x22010060 206 0xB14F609A 207 0x1E7B1E4C 208 0x18CDB29B 209 0x47B04E09
	210 0x0F01F804 211 0xD1FA42AC 212 0x6A8B4905 213 0x0F01F013 214 0x2200D1FB 215 0x609A4B02
	216 0xBDF84638 217 0x47702000 218 0x40006000 219 0x100012A5 220 0x2904B5F8 221 0x2104BF28
	222 0xF44F4B11 223 0x601A7240 224 0x22016059 225 0xF883609A 226 0xB1690060 227 0xB2F61E4E
	228 0x00F64416 229 0x46252400 230 0x47B84F0A 231 0x430540A0 232 0x42B43408 233 0xE000D1F9
	234 0x4A052500 235 0xF0136A93 236 0xD1FB0F01 237 0x4B022200 238 0x4628609A 239 0xBF00BDF8
	240 0x40006000 241 0x100012A5 242 0x2103B508 243 0x4B01209F 244 0xBD084798 245 0x10001371
	246 0x4B0AB508 247 0x7240F44F 248 0x2201601A 249 0x609A605A 250 0xF8832205 251 0x4B062060
	252 0x4A044798 253 0xF0136A93 254 0xD1FB0F01 255 0x4B012200 256 0xBD08609A 257 0x40006000
	258 0x100012A5 259 0xF44F4B08 260 0x601A7280 261 0x609A2201 262 0x0060F883 263 0x6A93461A
	264 0x0F01F013 265 0x2200D1FB 266 0x609A4B01 267 0xBF004770 268 0x40006000 269 0xF44F4B0E
	270 0x601A7280 271 0x609A2201 272 0xF8832220 273 0xF3C02060 274 0xF8834207 275 0xF3C02060
	276 0xF8832207 277 0xB2C02060 278 0x0060F883 279 0x6A93461A 280 0x0F01F013 281 0x2200D1FB
	282 0x609A4B01 283 0xBF004770 284 0x40006000 285 0xD0362A00 286 0x4613B430 287 0x7F80F5B2
	288 0xF44FBF28 289 0x461A7380 290 0xF44F4B19 291 0x601C7480 292 0x609C2401 293 0xF8832402
	294 0xF3C04060 295 0xF8834407 296 0xF3C04060 297 0xF8832407 298 0xB2C04060 299 0x0060F883
	300 0x1E4BB152 301 0xB2A41E54 302 0x4D0D4421 303 0x4F01F813 304 0x4060F885 305 0xD1F9428B
	306 0x6A8B4909 307 0x0F04F013 308 0x4907D0FB 309 0xF0136A8B 310 0xD1FB0F01 311 0x4B042100
	312 0x46106099 313 0x2000E001 314 0xBC304770 315 0xBF004770 316 0x40006000 317 0x4C03B510
	318 0xF01047A0 319 0xD1FB0F01 320 0xBF00BD10 321 0x100013D9 322 0x4C03B510 323 0xF01047A0
	324 0xD0FB0F02 325 0xBF00BD10 326 0x100013D9
}

set rtl8710_flasher_command_read_id      0
set rtl8710_flasher_command_mass_erase   1
set rtl8710_flasher_command_sector_erase 2
set rtl8710_flasher_command_read         3
set rtl8710_flasher_command_write        4
set rtl8710_flasher_command_verify       5
set rtl8710_flasher_command_read_otp     6

set rtl8710_flasher_mac_address_offset   0xA088

set rtl8710_flasher_ready                0
set rtl8710_flasher_capacity             0
set rtl8710_flasher_auto_erase           0
set rtl8710_flasher_auto_verify          0
set rtl8710_flasher_auto_erase_sector    0xFFFFFFFF

proc rtl8710_flasher_init {} {
	global rtl8710_flasher_firmware_ptr
	global rtl8710_flasher_buffer
	global rtl8710_flasher_capacity
	global rtl8710_flasher_ready
	global rtl8710_flasher_code

	if {[expr {$rtl8710_flasher_ready == 0}]} {
		echo "initializing RTL8710 flasher"
		halt
		mww [expr {$rtl8710_flasher_buffer + 0x08}] 0x00000000
		mww [expr {$rtl8710_flasher_buffer + 0x00}] 0x00000001
		array2mem rtl8710_flasher_code 32 $rtl8710_flasher_firmware_ptr [array size rtl8710_flasher_code]
		reg faultmask 0x01
		reg sp 0x20000000
		reg pc $rtl8710_flasher_firmware_ptr
		resume
		rtl8710_flasher_wait
		set id [rtl8710_flasher_mrw [expr {$rtl8710_flasher_buffer + 0x0C}]]
		set rtl8710_flasher_capacity [expr {2 ** [expr {($id >> 16) & 0xFF}]}]
		set rtl8710_flasher_ready 1
		echo "RTL8710 flasher initialized"
	}
	return ""
}

proc rtl8710_flasher_mrw {reg} {
	set value ""
	mem2array value 32 $reg 1
	return $value(0)
}

proc rtl8710_flasher_wait {} {
	global rtl8710_flasher_buffer
	while {[rtl8710_flasher_mrw [expr {$rtl8710_flasher_buffer + 0x00}]]} { }
}

proc rtl8710_flasher_load_block {local_filename offset len} {
	global rtl8710_flasher_buffer
	load_image $local_filename [expr {$rtl8710_flasher_buffer + 0x20 - $offset}] bin [expr {$rtl8710_flasher_buffer + 0x20}] $len
}

proc rtl8710_flasher_read_otp {} {
	global rtl8710_flasher_buffer
	global rtl8710_flasher_command_read_otp
	mww [expr {$rtl8710_flasher_buffer + 0x04}] $rtl8710_flasher_command_read_otp
	mww [expr {$rtl8710_flasher_buffer + 0x00}] 0x00000001
	rtl8710_flasher_wait
	mem2array otp_data 8 [expr {$rtl8710_flasher_buffer + 0x20}] 0x41
	echo "security register: [format %02X $otp_data(0)]"
	for {set x 1} {$x<0x41} {set x [expr {$x+8}]} {
		set res [format %02X [expr {$x-1}]]
		append res ": "
			for {set y 0} {$y<8} { incr y} {
			append res " " [format %02X $otp_data([expr {$x+$y}])]						
		}
		echo $res
	}

}

proc rtl8710_flasher_read_block {offset len} {
	global rtl8710_flasher_buffer
	global rtl8710_flasher_command_read
	mww [expr {$rtl8710_flasher_buffer + 0x04}] $rtl8710_flasher_command_read
	mww [expr {$rtl8710_flasher_buffer + 0x08}] 0x00000000
	mww [expr {$rtl8710_flasher_buffer + 0x10}] $offset
	mww [expr {$rtl8710_flasher_buffer + 0x14}] $len
	mww [expr {$rtl8710_flasher_buffer + 0x00}] 0x00000001
	rtl8710_flasher_wait
	set status [rtl8710_flasher_mrw [expr {$rtl8710_flasher_buffer + 0x08}]]
	if {[expr {$status > 0}]} {
		error "read error, offset $offset"
	}
}

proc rtl8710_flasher_write_block {offset len} {
	global rtl8710_flasher_buffer
	global rtl8710_flasher_command_write
	mww [expr {$rtl8710_flasher_buffer + 0x04}] $rtl8710_flasher_command_write
	mww [expr {$rtl8710_flasher_buffer + 0x08}] 0x00000000
	mww [expr {$rtl8710_flasher_buffer + 0x10}] $offset
	mww [expr {$rtl8710_flasher_buffer + 0x14}] $len
	mww [expr {$rtl8710_flasher_buffer + 0x00}] 0x00000001
	rtl8710_flasher_wait
	set status [rtl8710_flasher_mrw [expr {$rtl8710_flasher_buffer + 0x08}]]
	if {[expr {$status > 0}]} {
		error "write error, offset $offset"
	}
}

proc rtl8710_flasher_verify_block {offset len} {
	global rtl8710_flasher_buffer
	global rtl8710_flasher_command_verify
	mww [expr {$rtl8710_flasher_buffer + 0x04}] $rtl8710_flasher_command_verify
	mww [expr {$rtl8710_flasher_buffer + 0x08}] 0x00000000
	mww [expr {$rtl8710_flasher_buffer + 0x10}] $offset
	mww [expr {$rtl8710_flasher_buffer + 0x14}] $len
	mww [expr {$rtl8710_flasher_buffer + 0x00}] 0x00000001
	rtl8710_flasher_wait
	set status [rtl8710_flasher_mrw [expr {$rtl8710_flasher_buffer + 0x08}]]
	if {[expr {$status > 0}]} {
		set status [rtl8710_flasher_mrw [expr {$rtl8710_flasher_buffer + 0x0C}]]
		set status [expr {$status + $offset}]
		error "verify error, offset $status"
	}
}

proc rtl8710_flash_read_id {} {
	global rtl8710_flasher_buffer
	global rtl8710_flasher_capacity
	global rtl8710_flasher_command_read_id
	rtl8710_flasher_init
	mww [expr {$rtl8710_flasher_buffer + 0x04}] $rtl8710_flasher_command_read_id
	mww [expr {$rtl8710_flasher_buffer + 0x08}] 0x00000000
	mww [expr {$rtl8710_flasher_buffer + 0x00}] 0x00000001
	rtl8710_flasher_wait
	set id [rtl8710_flasher_mrw [expr {$rtl8710_flasher_buffer + 0x0C}]]
	set manufacturer_id [format "0x%02X" [expr {$id & 0xFF}]]
	set memory_type [format "0x%02X" [expr {($id >> 8) & 0xFF}]]
	set memory_capacity [expr {2 ** [expr {($id >> 16) & 0xFF}]}]
	echo "manufacturer ID: $manufacturer_id, memory type: $memory_type, memory capacity: $memory_capacity bytes"
}

proc rtl8710_flash_mass_erase {} {
	global rtl8710_flasher_buffer
	global rtl8710_flasher_command_mass_erase
	rtl8710_flasher_init
	mww [expr {$rtl8710_flasher_buffer + 0x04}] $rtl8710_flasher_command_mass_erase
	mww [expr {$rtl8710_flasher_buffer + 0x08}] 0x00000000
	mww [expr {$rtl8710_flasher_buffer + 0x00}] 0x00000001
	rtl8710_flasher_wait
}

proc rtl8710_flash_sector_erase {offset} {
	global rtl8710_flasher_buffer
	global rtl8710_flasher_command_sector_erase
	rtl8710_flasher_init
	mww [expr {$rtl8710_flasher_buffer + 0x04}] $rtl8710_flasher_command_sector_erase
	mww [expr {$rtl8710_flasher_buffer + 0x08}] 0x00000000
	mww [expr {$rtl8710_flasher_buffer + 0x10}] $offset
	mww [expr {$rtl8710_flasher_buffer + 0x00}] 0x00000001
	rtl8710_flasher_wait
}

proc rtl8710_flash_read {local_filename loc size} {
	global rtl8710_flasher_buffer
	global rtl8710_flasher_buffer_size
	rtl8710_flasher_init
	for {set offset 0} {$offset < $size} {set offset [expr {$offset + $rtl8710_flasher_buffer_size}]} {
		set len [expr {$size - $offset}]
		if {[expr {$len > $rtl8710_flasher_buffer_size}]} {
			set len $rtl8710_flasher_buffer_size
		}
		set flash_offset [expr {$loc + $offset}]
		echo "read offset $flash_offset"
		rtl8710_flasher_read_block $flash_offset $len
		dump_image /tmp/_rtl8710_flasher.bin [expr {$rtl8710_flasher_buffer + 0x20}] $len
		exec dd conv=notrunc if=/tmp/_rtl8710_flasher.bin "of=$local_filename" bs=1 "seek=$offset"
		echo "read $len bytes"
	}
}

proc rtl8710_flash_write {local_filename loc} {
	global rtl8710_flasher_buffer_size
	global rtl8710_flasher_sector_size
	global rtl8710_flasher_auto_erase
	global rtl8710_flasher_auto_verify
	global rtl8710_flasher_auto_erase_sector
	rtl8710_flasher_init
	set sector 0
	set size [file size $local_filename]
	for {set offset 0} {$offset < $size} {set offset [expr {$offset + $rtl8710_flasher_buffer_size}]} {
		set len [expr {$size - $offset}]
		if {[expr {$len > $rtl8710_flasher_buffer_size}]} {
			set len $rtl8710_flasher_buffer_size
		}
		set flash_offset [expr {$loc + $offset}]
		echo "write offset $flash_offset"
		rtl8710_flasher_load_block $local_filename $offset $len
		if {[expr {$rtl8710_flasher_auto_erase != 0}]} {
			for {set i $flash_offset} {$i < [expr {$flash_offset + $len}]} {incr i} {
				set sector [expr {$i / $rtl8710_flasher_sector_size}]
				if {[expr {$rtl8710_flasher_auto_erase_sector != $sector}]} {
					echo "erase sector $sector"
					rtl8710_flash_sector_erase [expr {$sector * $rtl8710_flasher_sector_size}]
					set rtl8710_flasher_auto_erase_sector $sector
				}
			}
		}
		rtl8710_flasher_write_block $flash_offset $len
		echo "wrote $len bytes"
		if {[expr {$rtl8710_flasher_auto_verify != 0}]} {
			echo "verify offset $flash_offset"
			rtl8710_flasher_verify_block $flash_offset $len
		}
	}
}

proc rtl8710_flash_verify {local_filename loc} {
	global rtl8710_flasher_buffer_size
	rtl8710_flasher_init
	set size [file size $local_filename]
	for {set offset 0} {$offset < $size} {set offset [expr {$offset + $rtl8710_flasher_buffer_size}]} {
		set len [expr {$size - $offset}]
		if {[expr {$len > $rtl8710_flasher_buffer_size}]} {
			set len $rtl8710_flasher_buffer_size
		}
		set flash_offset [expr {$loc + $offset}]
		echo "read offset $flash_offset"
		rtl8710_flasher_load_block $local_filename $offset $len
		echo "verify offset $flash_offset"
		rtl8710_flasher_verify_block $flash_offset $len
	}
}

proc rtl8710_flash_read_mac {} {
	global rtl8710_flasher_mac_address_offset
	global rtl8710_flasher_buffer
	rtl8710_flasher_init
	rtl8710_flasher_read_block $rtl8710_flasher_mac_address_offset 6
	set mac ""
	mem2array mac 8 [expr {$rtl8710_flasher_buffer + 0x20}] 6
	set res "MAC address: "
	append res [format %02X $mac(0)]
	append res ":" [format %02X $mac(1)]
	append res ":" [format %02X $mac(2)]
	append res ":" [format %02X $mac(3)]
	append res ":" [format %02X $mac(4)]
	append res ":" [format %02X $mac(5)]
	echo $res
}

proc rtl8710_flash_auto_erase {on} {
	global rtl8710_flasher_auto_erase
	if {[expr {$on != 0}]} {
		set rtl8710_flasher_auto_erase 1
		echo "auto erase on"
	} else {
		set rtl8710_flasher_auto_erase 0
		echo "auto erase off"
	}
}

proc rtl8710_flash_auto_verify {on} {
	global rtl8710_flasher_auto_verify
	if {[expr {$on != 0}]} {
		set rtl8710_flasher_auto_verify 1
		echo "auto verify on"
	} else {
		set rtl8710_flasher_auto_verify 0
		echo "auto verify off"
	}
}

proc rtl8710_reboot {} {
	mww 0xE000ED0C 0x05FA0007
}

