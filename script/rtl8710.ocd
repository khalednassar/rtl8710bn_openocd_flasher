#
# OpenOCD script for RTL8710
# Copyright (C) 2016 Rebane, rebane@alkohol.ee
#

set CHIPNAME rtl8711b
set CHIPSERIES amebaz

transport select swd

# Adapt based on what transport is active.
source [find target/swj-dp.tcl]

if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
} else {
	error "CHIPNAME not set. Please do not include amebaz.cfg directly."
}

if { [info exists CHIPSERIES] } {
	# Validate chip series is supported
	if { $CHIPSERIES != "amebaz" } {
		error "Unsupported chip series specified."
	}
	set _CHIPSERIES $CHIPSERIES
} else {
	error "CHIPSERIES not set. Please do not include amebaz.cfg directly."
}

if { [info exists CPUTAPID] } {
	# Allow user override
	set _CPUTAPID $CPUTAPID
} else {
	# Amebaz use a Cortex M4 core.
	if { $_CHIPSERIES == "amebaz" } {
		set _CPUTAPID 0x2ba01477
	}
}

if { [info exists WORKAREASIZE] } {
       set _WORKAREASIZE $WORKAREASIZE
} else {
       set _WORKAREASIZE 0x800
}

swd newdap $_CHIPNAME cpu -irlen 4 -expected-id $_CPUTAPID

set _TARGETNAME $_CHIPNAME.cpu
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu

set _ENDIAN little

target create $_TARGETNAME cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap

$_TARGETNAME configure -work-area-phys 0x10001000 -work-area-size $_WORKAREASIZE -work-area-backup 0

adapter speed 1000
adapter srst delay 200

# AmebaZ (Cortex M4 core) support SYSRESETREQ
if {![using_hla]} {
    # if srst is not fitted use SYSRESETREQ to
    # perform a soft reset
    cortex_m reset_config sysresetreq
}

$_TARGETNAME configure -event reset-init {amebaz_init}

set rtl8710_flasher_firmware_ptr 0x10001000
set rtl8710_flasher_buffer 0x10008000
set rtl8710_flasher_buffer_size 131072
set rtl8710_flasher_sector_size 4096

set rtl8710_flasher_code {
	0x4FF0E92D 0xB671B085 0x6B1A4B94 0x7240F042 0x69DA631A 0x7280F442
	0x22FF61DA 0x2120F8C3 0x2124F8C3 0x47984B8E 0x47984B8E 0x4B8E20AB
	0xF44F4798 0xBF003380 0xD1FC3B01 0x47A04C89 0x4B8920C1 0x47A04798
	0x47984B88 0x60184B88 0x4C8847A0 0x4E882700 0x68236027 0xD0FC2B00
	0x681B4B86 0xF8DFB95B 0xF8C88208 0x4D7D3000 0x4B7E47A8 0xF8C84798
	0x47A80000 0x4B7FE7EC 0x2B06681B 0x4D77D122 0x210147A8 0x4B7C202B
	0xB2C04798 0x70184B7B 0x4B7320B1 0x47A84798 0xF8DF2500 0xF04FA1F8
	0xF8DF0910 0x464A81F4 0x010AEB05 0x47C04628 0x2D403510 0x4D69D1F7
	0x20C147A8 0x47984B68 0xE7C547A8 0x681B4B6B 0xD10E2B01 0x47A84D63
	0xF8DF2006 0x47C0818C 0x47984B69 0x47C020C7 0x200447A8 0x47A847C0
	0x4B62E7B2 0x2B02681B 0x4D5AD10F 0x200647A8 0x8164F8DF 0x4B6047C0
	0x68304798 0x47984B5F 0x200447A8 0x47A847C0 0x4B58E79E 0x2B03681B
	0x4B50D11B 0xF8D64798 0x4B59B000 0xB18B681B 0xF8DF2500 0xF8DFA150
	0xF8DF9168 0x22108154 0x010AEB05 0x0005EB0B 0x351047C8 0x3000F8D8
	0xD8F442AB 0x47984B43 0x4B48E77E 0x2B04681B 0x4B40D12E 0x4B4A4798
	0x2B00681B 0xAF74F43F 0xF8DF2500 0xF8DFA11C 0x46BB90F0 0x2000F8DA
	0x0802EBC5 0x47C82006 0x47984B3F 0x46426830 0x7F80F5B8 0xF44FBF28
	0xB2927280 0x44294939 0x4B3C4428 0x4F2F4798 0x200447B8 0x47B847C8
	0x7580F505 0x3000F8DA 0xD8DF42AB 0xE74B465F 0x681B4B2E 0xD1452B05
	0x47984B26 0x681B4B30 0xF43F2B00 0x2500AF41 0x90C4F8DF 0x80B0F8DF
	0xA0A0F8DF 0x22106830 0x44284669 0xF8D847C8 0x1B400000 0xBF282810
	0xB3182010 0x300AF815 0xF89DB2DB 0x429A2000 0xF10DD116 0x44680301
	0xEBCE46EE 0xF10E0E05 0xF50E5E80 0xF10E4E00 0xE0060E1F 0x1B01F813
	0x2003F81E 0x4291B2D2 0x4298D102 0xE005D1F6 0x4A172301 0x4B0C6013
	0xE709601D 0x47984B07 0xF8D83510 0x42AB3000 0xE701D8C8 0x4A102301
	0xE6FD6013 0x40000200 0x100012BD 0x100014F5 0x1000140D 0x100013C9
	0x1000800C 0x10008000 0x10008010 0x10008004 0x10001371 0x10008020
	0x10001509 0x10001435 0x10008014 0x10001475 0x10008008 0x10008021
	0x10001305 0x6A534A04 0x030BF3C3 0xD0FA2B00 0xF8934B01 0x47700060
	0x40020000 0x6B1A4B10 0x7240F442 0x691A631A 0x0210F042 0xF8D3611A
	0xF02220C0 0xF8C30206 0xF8D320C0 0xF04220C0 0xF8C30201 0xF50320C0
	0x220043BC 0x62DA609A 0x61192101 0x61592102 0x61DA619A 0x477064DA
	0x40000200 0xB5F8B372 0x2A104617 0x2710BF28 0xF44F4B15 0x601A7240
	0x2203605F 0x2060F883 0x4207F3C0 0x2060F883 0x2207F3C0 0x2060F883
	0xF883B2C0 0x22010060 0xB14F609A 0x1E7B1E4C 0x18CDB29B 0x47B04E09
	0x0F01F804 0xD1FA42AC 0x6A8B4905 0x0F01F013 0x2200D1FB 0x609A4B02
	0xBDF84638 0x47702000 0x40020000 0x100012A5 0x2904B5F8 0x2104BF28
	0xF44F4B11 0x601A7240 0x22016059 0xF883609A 0xB1690060 0xB2F61E4E
	0x00F64416 0x46252400 0x47B84F0A 0x430540A0 0x42B43408 0xE000D1F9
	0x4A052500 0xF0136A93 0xD1FB0F01 0x4B022200 0x4628609A 0xBF00BDF8
	0x40020000 0x100012A5 0x2103B508 0x4B01209F 0xBD084798 0x10001371
	0x4B0AB508 0x7240F44F 0x2201601A 0x609A605A 0xF8832205 0x4B062060
	0x4A044798 0xF0136A93 0xD1FB0F01 0x4B012200 0xBD08609A 0x40020000
	0x100012A5 0xF44F4B08 0x601A7280 0x609A2201 0x0060F883 0x6A93461A
	0x0F01F013 0x2200D1FB 0x609A4B01 0xBF004770 0x40020000 0xF44F4B0E
	0x601A7280 0x609A2201 0xF8832220 0xF3C02060 0xF8834207 0xF3C02060
	0xF8832207 0xB2C02060 0x0060F883 0x6A93461A 0x0F01F013 0x2200D1FB
	0x609A4B01 0xBF004770 0x40020000 0xD0362A00 0x4613B430 0x7F80F5B2
	0xF44FBF28 0x461A7380 0xF44F4B19 0x601C7480 0x609C2401 0xF8832402
	0xF3C04060 0xF8834407 0xF3C04060 0xF8832407 0xB2C04060 0x0060F883
	0x1E4BB152 0xB2A41E54 0x4D0D4421 0x4F01F813 0x4060F885 0xD1F9428B
	0x6A8B4909 0x0F04F013 0x4907D0FB 0xF0136A8B 0xD1FB0F01 0x4B042100
	0x46106099 0x2000E001 0xBC304770 0xBF004770 0x40020000 0x4C03B510
	0xF01047A0 0xD1FB0F01 0xBF00BD10 0x100013D9 0x4C03B510 0xF01047A0
	0xD0FB0F02 0xBF00BD10 0x100013D9
}

set rtl8710_flasher_command_read_id      0
set rtl8710_flasher_command_mass_erase   1
set rtl8710_flasher_command_sector_erase 2
set rtl8710_flasher_command_read         3
set rtl8710_flasher_command_write        4
set rtl8710_flasher_command_verify       5
set rtl8710_flasher_command_read_otp     6

set rtl8710_flasher_mac_address_offset   0xA088

set rtl8710_flasher_ready                0
set rtl8710_flasher_capacity             0
set rtl8710_flasher_auto_erase           0
set rtl8710_flasher_auto_verify          0
set rtl8710_flasher_auto_erase_sector    0xFFFFFFFF

proc rtl8710_flasher_write_code {} {
	global rtl8710_flasher_firmware_ptr
	global rtl8710_flasher_buffer
	global rtl8710_flasher_code
	halt
	mww [expr {$rtl8710_flasher_buffer + 0x08}] 0x00000000
	mww [expr {$rtl8710_flasher_buffer + 0x00}] 0x00000001
	write_memory $rtl8710_flasher_firmware_ptr 32 $rtl8710_flasher_code
}

proc rtl8710_flasher_init {} {
	global rtl8710_flasher_firmware_ptr
	global rtl8710_flasher_buffer
	global rtl8710_flasher_capacity
	global rtl8710_flasher_ready
	global rtl8710_flasher_code

	if {[expr {$rtl8710_flasher_ready == 0}]} {
		echo "initializing RTL8710 flasher"
		rtl8710_flasher_write_code
		reg faultmask 0x01
		# Set SP to 0x10036000 - which is in MAIN ram
		reg sp 0x10036000
		reg pc [expr {$rtl8710_flasher_firmware_ptr + 0x01}]
		resume
		rtl8710_flasher_wait
		set id [rtl8710_flasher_mrw [expr {$rtl8710_flasher_buffer + 0x0C}]]
		set rtl8710_flasher_capacity [expr {2 ** [expr {($id >> 16) & 0xFF}]}]
		set rtl8710_flasher_ready 1
		echo "RTL8710 flasher initialized"
	}
	return ""
}

proc rtl8710_flasher_mrw {reg} {
	return [read_memory $reg 32 1]
}

proc rtl8710_flasher_wait {} {
	global rtl8710_flasher_buffer
	while {[rtl8710_flasher_mrw [expr {$rtl8710_flasher_buffer + 0x00}]]} { }
}

proc rtl8710_flasher_load_block {local_filename offset len} {
	global rtl8710_flasher_buffer
	load_image $local_filename [expr {$rtl8710_flasher_buffer + 0x20 - $offset}] bin [expr {$rtl8710_flasher_buffer + 0x20}] $len
}

proc rtl8710_flasher_read_otp {} {
	global rtl8710_flasher_buffer
	global rtl8710_flasher_command_read_otp
	mww [expr {$rtl8710_flasher_buffer + 0x04}] $rtl8710_flasher_command_read_otp
	mww [expr {$rtl8710_flasher_buffer + 0x00}] 0x00000001
	rtl8710_flasher_wait
	set otp_data [read_memory 8 [expr {$rtl8710_flasher_buffer + 0x20}] 0x41]
	echo "security register: [format %02X $otp_data(0)]"
	for {set x 1} {$x<0x41} {set x [expr {$x+8}]} {
		set res [format %02X [expr {$x-1}]]
		append res ": "
			for {set y 0} {$y<8} { incr y} {
			append res " " [format %02X $otp_data([expr {$x+$y}])]						
		}
		echo $res
	}

}

proc rtl8710_flasher_read_block {offset len} {
	global rtl8710_flasher_buffer
	global rtl8710_flasher_command_read
	mww [expr {$rtl8710_flasher_buffer + 0x04}] $rtl8710_flasher_command_read
	mww [expr {$rtl8710_flasher_buffer + 0x08}] 0x00000000
	mww [expr {$rtl8710_flasher_buffer + 0x10}] $offset
	mww [expr {$rtl8710_flasher_buffer + 0x14}] $len
	mww [expr {$rtl8710_flasher_buffer + 0x00}] 0x00000001
	rtl8710_flasher_wait
	set status [rtl8710_flasher_mrw [expr {$rtl8710_flasher_buffer + 0x08}]]
	if {[expr {$status > 0}]} {
		error "read error, offset $offset"
	}
}

proc rtl8710_flasher_write_block {offset len} {
	global rtl8710_flasher_buffer
	global rtl8710_flasher_command_write
	mww [expr {$rtl8710_flasher_buffer + 0x04}] $rtl8710_flasher_command_write
	mww [expr {$rtl8710_flasher_buffer + 0x08}] 0x00000000
	mww [expr {$rtl8710_flasher_buffer + 0x10}] $offset
	mww [expr {$rtl8710_flasher_buffer + 0x14}] $len
	mww [expr {$rtl8710_flasher_buffer + 0x00}] 0x00000001
	rtl8710_flasher_wait
	set status [rtl8710_flasher_mrw [expr {$rtl8710_flasher_buffer + 0x08}]]
	if {[expr {$status > 0}]} {
		error "write error, offset $offset"
	}
}

proc rtl8710_flasher_verify_block {offset len} {
	global rtl8710_flasher_buffer
	global rtl8710_flasher_command_verify
	mww [expr {$rtl8710_flasher_buffer + 0x04}] $rtl8710_flasher_command_verify
	mww [expr {$rtl8710_flasher_buffer + 0x08}] 0x00000000
	mww [expr {$rtl8710_flasher_buffer + 0x10}] $offset
	mww [expr {$rtl8710_flasher_buffer + 0x14}] $len
	mww [expr {$rtl8710_flasher_buffer + 0x00}] 0x00000001
	rtl8710_flasher_wait
	set status [rtl8710_flasher_mrw [expr {$rtl8710_flasher_buffer + 0x08}]]
	if {[expr {$status > 0}]} {
		set status [rtl8710_flasher_mrw [expr {$rtl8710_flasher_buffer + 0x0C}]]
		set status [expr {$status + $offset}]
		error "verify error, offset $status"
	}
}

proc rtl8710_flash_read_id {} {
	global rtl8710_flasher_buffer
	global rtl8710_flasher_capacity
	global rtl8710_flasher_command_read_id
	rtl8710_flasher_init
	mww [expr {$rtl8710_flasher_buffer + 0x04}] $rtl8710_flasher_command_read_id
	mww [expr {$rtl8710_flasher_buffer + 0x08}] 0x00000000
	mww [expr {$rtl8710_flasher_buffer + 0x00}] 0x00000001
	rtl8710_flasher_wait
	set id [rtl8710_flasher_mrw [expr {$rtl8710_flasher_buffer + 0x0C}]]
	set manufacturer_id [format "0x%02X" [expr {$id & 0xFF}]]
	set memory_type [format "0x%02X" [expr {($id >> 8) & 0xFF}]]
	set memory_capacity [expr {2 ** [expr {($id >> 16) & 0xFF}]}]
	echo "manufacturer ID: $manufacturer_id, memory type: $memory_type, memory capacity: $memory_capacity bytes"
}

proc rtl8710_flash_mass_erase {} {
	global rtl8710_flasher_buffer
	global rtl8710_flasher_command_mass_erase
	rtl8710_flasher_init
	mww [expr {$rtl8710_flasher_buffer + 0x04}] $rtl8710_flasher_command_mass_erase
	mww [expr {$rtl8710_flasher_buffer + 0x08}] 0x00000000
	mww [expr {$rtl8710_flasher_buffer + 0x00}] 0x00000001
	rtl8710_flasher_wait
}

proc rtl8710_flash_sector_erase {offset} {
	global rtl8710_flasher_buffer
	global rtl8710_flasher_command_sector_erase
	rtl8710_flasher_init
	mww [expr {$rtl8710_flasher_buffer + 0x04}] $rtl8710_flasher_command_sector_erase
	mww [expr {$rtl8710_flasher_buffer + 0x08}] 0x00000000
	mww [expr {$rtl8710_flasher_buffer + 0x10}] $offset
	mww [expr {$rtl8710_flasher_buffer + 0x00}] 0x00000001
	rtl8710_flasher_wait
}

proc rtl8710_flash_read {local_filename loc size} {
	global rtl8710_flasher_buffer
	global rtl8710_flasher_buffer_size
	rtl8710_flasher_init
	for {set offset 0} {$offset < $size} {set offset [expr {$offset + $rtl8710_flasher_buffer_size}]} {
		set len [expr {$size - $offset}]
		if {[expr {$len > $rtl8710_flasher_buffer_size}]} {
			set len $rtl8710_flasher_buffer_size
		}
		set flash_offset [expr {$loc + $offset}]
		echo "read offset $flash_offset"
		rtl8710_flasher_read_block $flash_offset $len
		dump_image /tmp/_rtl8710_flasher.bin [expr {$rtl8710_flasher_buffer + 0x20}] $len
		exec dd conv=notrunc if=/tmp/_rtl8710_flasher.bin "of=$local_filename" bs=1 "seek=$offset"
		echo "read $len bytes"
	}
}

proc rtl8710_flash_write {local_filename loc} {
	global rtl8710_flasher_buffer_size
	global rtl8710_flasher_sector_size
	global rtl8710_flasher_auto_erase
	global rtl8710_flasher_auto_verify
	global rtl8710_flasher_auto_erase_sector
	rtl8710_flasher_init
	set sector 0
	set size [file size $local_filename]
	for {set offset 0} {$offset < $size} {set offset [expr {$offset + $rtl8710_flasher_buffer_size}]} {
		set len [expr {$size - $offset}]
		if {[expr {$len > $rtl8710_flasher_buffer_size}]} {
			set len $rtl8710_flasher_buffer_size
		}
		set flash_offset [expr {$loc + $offset}]
		echo "write offset $flash_offset"
		rtl8710_flasher_load_block $local_filename $offset $len
		if {[expr {$rtl8710_flasher_auto_erase != 0}]} {
			for {set i $flash_offset} {$i < [expr {$flash_offset + $len}]} {incr i} {
				set sector [expr {$i / $rtl8710_flasher_sector_size}]
				if {[expr {$rtl8710_flasher_auto_erase_sector != $sector}]} {
					echo "erase sector $sector"
					rtl8710_flash_sector_erase [expr {$sector * $rtl8710_flasher_sector_size}]
					set rtl8710_flasher_auto_erase_sector $sector
				}
			}
		}
		rtl8710_flasher_write_block $flash_offset $len
		echo "wrote $len bytes"
		if {[expr {$rtl8710_flasher_auto_verify != 0}]} {
			echo "verify offset $flash_offset"
			rtl8710_flasher_verify_block $flash_offset $len
		}
	}
}

proc rtl8710_flash_verify {local_filename loc} {
	global rtl8710_flasher_buffer_size
	rtl8710_flasher_init
	set size [file size $local_filename]
	for {set offset 0} {$offset < $size} {set offset [expr {$offset + $rtl8710_flasher_buffer_size}]} {
		set len [expr {$size - $offset}]
		if {[expr {$len > $rtl8710_flasher_buffer_size}]} {
			set len $rtl8710_flasher_buffer_size
		}
		set flash_offset [expr {$loc + $offset}]
		echo "read offset $flash_offset"
		rtl8710_flasher_load_block $local_filename $offset $len
		echo "verify offset $flash_offset"
		rtl8710_flasher_verify_block $flash_offset $len
	}
}

proc rtl8710_flash_read_mac {} {
	global rtl8710_flasher_mac_address_offset
	global rtl8710_flasher_buffer
	rtl8710_flasher_init
	rtl8710_flasher_read_block $rtl8710_flasher_mac_address_offset 6
	echo "here"
	set mac [read_memory [expr {$rtl8710_flasher_buffer + 0x20}] 8 6]
	set res "MAC address: "
	append res [format %02X [lindex $mac 0]]
	append res ":" [format %02X [lindex $mac 1]]
	append res ":" [format %02X [lindex $mac 2]]
	append res ":" [format %02X [lindex $mac 3]]
	append res ":" [format %02X [lindex $mac 4]]
	append res ":" [format %02X [lindex $mac 5]]
	echo $res
}

proc rtl8710_flash_auto_erase {on} {
	global rtl8710_flasher_auto_erase
	if {[expr {$on != 0}]} {
		set rtl8710_flasher_auto_erase 1
		echo "auto erase on"
	} else {
		set rtl8710_flasher_auto_erase 0
		echo "auto erase off"
	}
}

proc rtl8710_flash_auto_verify {on} {
	global rtl8710_flasher_auto_verify
	if {[expr {$on != 0}]} {
		set rtl8710_flasher_auto_verify 1
		echo "auto verify on"
	} else {
		set rtl8710_flasher_auto_verify 0
		echo "auto verify off"
	}
}

proc rtl8710_reboot {} {
	mww 0xE000ED0C 0x05FA0007
}

