#
# OpenOCD script for RTL8710
# Copyright (C) 2016 Rebane, rebane@alkohol.ee
#

source [find target/swj-dp.tcl]

if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
} else {
	set _CHIPNAME rtl8710
}

if { [info exists ENDIAN] } {
	set _ENDIAN $ENDIAN
} else {
	set _ENDIAN little
}

if { [info exists WORKAREASIZE] } {
	set _WORKAREASIZE $WORKAREASIZE
} else {
	set _WORKAREASIZE 0x800
}

if { [info exists CPUTAPID] } {
	set _CPUTAPID $CPUTAPID
} else {
	set _CPUTAPID 0x2ba01477
}

swj_newdap $_CHIPNAME cpu -irlen 4 -expected-id $_CPUTAPID

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME cortex_m -endian $_ENDIAN -chain-position $_TARGETNAME

$_TARGETNAME configure -work-area-phys 0x10001000 -work-area-size $_WORKAREASIZE -work-area-backup 0

adapter_khz 500
adapter_nsrst_delay 100

if {![using_hla]} {
	cortex_m reset_config sysresetreq
}

set rtl8710_flasher_firmware_ptr 0x10001000
set rtl8710_flasher_buffer 0x10008000
set rtl8710_flasher_buffer_size 262144
set rtl8710_flasher_sector_size 4096

array set rtl8710_flasher_code {
	0 0x4FF0E92D 1 0xB671B087 2 0x4C5B4B5A 3 0x4D5B6B1A 4 0x7240F042 5 0x69DA631A
	6 0xF4424E59 7 0x61DA7280 8 0xF8C322FF 9 0xF8C32120 10 0x4B562124 11 0x47A04798
	12 0xF8DF47A8 13 0x60309178 14 0x47A04F53 15 0x4B539501 16 0x601A2200 17 0x2A00681A
	18 0x4B51D0FC 19 0xB92A681A 20 0x47A06032 21 0x47989B01 22 0xE00D6030 23 0x2A01681A
	24 0x47A0D10C 25 0x20064D4B 26 0x4B4B47A8 27 0x20C74798 28 0x47A047A8 29 0x47A82004
	30 0xE7E047A0 31 0x2A02681A 32 0x47A0D10A 33 0x20064D43 34 0x4B4347A8 35 0x4B434798
	36 0x4B436818 37 0xE7EC4798 38 0x2A03681A 39 0x47A0D111 40 0xF8DF4B3E 41 0xF8D3B10C
	42 0x2500A000 43 0xEB05683B 44 0x429D000A 45 0x493BD2E0 46 0x44292210 47 0x351047D8
	48 0x681AE7F4 49 0xD1242A04 50 0xF8DF47A0 51 0xF8DFA0C8 52 0x2500B0CC 53 0x429D683B
	54 0x683AD2B1 55 0xEBC52006 56 0x47D00802 57 0x47984B2C 58 0xF5B84642 59 0xF8DB7F80
	60 0x492C0000 61 0xF44FBF28 62 0x44297280 63 0x4B2AB292 64 0x47984428 65 0x200447A0
	66 0xF50547D0 67 0x47A07580 68 0x681BE7E0 69 0xD1292B05 70 0xF8DF47A0 71 0xF8DFA080
	72 0x2500B090 73 0x429D683B 74 0xF8DAD289 75 0x22100000 76 0x4428A902 77 0x683B47D8
	78 0x1B5B491A 79 0xBF282B10 80 0x22002310 81 0x429A4429 82 0xF10DD00D 83 0x5C880E08
	84 0xE002F81E 85 0xD1014586 86 0xE7F43201 87 0xF8C92301 88 0x60353000 89 0x47A0E76B
	90 0xE7DB3510 91 0xF8C92301 92 0xE7643000 93 0x40000200 94 0x100013B5 95 0x1000127D
	96 0x1000800C 97 0x100011CD 98 0x10008014 99 0x10008000 100 0x10008004 101 0x100012F1
	102 0x100013C5 103 0x10008010 104 0x10001315 105 0x10008020 106 0x10001351 107 0x10008008
	108 0x10001215 109 0x6A534A04 110 0x030BF3C3 111 0xD0FA2B00 112 0xF8934B01 113 0x47700060
	114 0x40006000 115 0x21014B10 116 0xF4426B1A 117 0x631A7240 118 0xF042691A 119 0x611A0210
	120 0x20C0F8D3 121 0x0206F022 122 0x20C0F8C3 123 0x20C0F8D3 124 0x0201F042 125 0x20C0F8C3
	126 0x43BCF503 127 0x609A2200 128 0x611962DA 129 0x61592102 130 0x61DA619A 131 0x477064DA
	132 0x40000200 133 0xB352B570 134 0xBF282A10 135 0x46142210 136 0x4B14460D 137 0x7240F44F
	138 0x2203601A 139 0xF883605C 140 0xF3C02060 141 0xF8834207 142 0xF3C02060 143 0xF8832207
	144 0xB2C02060 145 0x4E0C2201 146 0x0060F883 147 0x47B0609A 148 0x0B01F805 149 0xB29B1A6B
	150 0xD8F8429C 151 0x6A934A05 152 0x0301F013 153 0x4A03D1FB 154 0x60934620 155 0x4610BD70
	156 0xBF00BD70 157 0x40006000 158 0x100011B5 159 0xF44F490E 160 0xB5707340 161 0x2303600B
	162 0x2301604B 163 0x239F608B 164 0x3060F881 165 0x47A84D09 166 0x47A84604 167 0x47A84606
	168 0xEA400400 169 0x43202006 170 0xF0136A8B 171 0xD1FB0301 172 0x60934A01 173 0xBF00BD70
	174 0x40006000 175 0x100011B5 176 0xB5084909 177 0x7340F44F 178 0x2301600B 179 0x608B604B
	180 0xF8812305 181 0x4B053060 182 0x6A8B4798 183 0x0301F013 184 0x4A01D1FB 185 0xBD086093
	186 0x40006000 187 0x100011B5 188 0xF44F4B07 189 0x601A7280 190 0x609A2201 191 0x0060F883
	192 0xF0126A9A 193 0xD1FB0201 194 0x609A4B01 195 0xBF004770 196 0x40006000 197 0xF44F4B0D
	198 0x601A7280 199 0x609A2201 200 0xF8832220 201 0xF3C02060 202 0xF8834207 203 0xF3C02060
	204 0xB2C02207 205 0x2060F883 206 0x0060F883 207 0xF0126A9A 208 0xD1FB0201 209 0x609A4B01
	210 0xBF004770 211 0x40006000 212 0xB35AB510 213 0xF44F4B16 214 0x601C7480 215 0x609C2401
	216 0xF8832402 217 0xF3C04060 218 0xF8834407 219 0xF3C04060 220 0xF8832407 221 0x460C4060
	222 0x7F80F5B2 223 0xBF28B2C0 224 0x7280F44F 225 0x0060F883 226 0x0B01F814 227 0x0060F883
	228 0xB2801A60 229 0x48064282 230 0x6A83D8F6 231 0xD5FC075B 232 0xF0136A83 233 0xD1FB0301
	234 0x608B4901 235 0xBD104610 236 0x40006000 237 0x4C02B510 238 0x07C347A0 239 0xBD10D4FC
	240 0x100012C1 241 0x4C02B510 242 0x078347A0 243 0xBD10D5FC 244 0x100012C1
}

set rtl8710_flasher_command_read_id      0
set rtl8710_flasher_command_mass_erase   1
set rtl8710_flasher_command_sector_erase 2
set rtl8710_flasher_command_read         3
set rtl8710_flasher_command_write        4
set rtl8710_flasher_command_verify       5

set rtl8710_flasher_mac_address_offset   0xA088

set rtl8710_flasher_ready                0
set rtl8710_flasher_capacity             0
set rtl8710_flasher_auto_erase           0
set rtl8710_flasher_auto_verify          0
set rtl8710_flasher_auto_erase_sector    0xFFFFFFFF

proc rtl8710_flasher_init {} {
	global rtl8710_flasher_firmware_ptr
	global rtl8710_flasher_buffer
	global rtl8710_flasher_capacity
	global rtl8710_flasher_ready
	global rtl8710_flasher_code

	if {[expr {$rtl8710_flasher_ready == 0}]} {
		echo "initializing RTL8710 flasher"
		halt
		mww [expr {$rtl8710_flasher_buffer + 0x08}] 0x00000000
		mww [expr {$rtl8710_flasher_buffer + 0x00}] 0x00000001
		array2mem rtl8710_flasher_code 32 $rtl8710_flasher_firmware_ptr [array size rtl8710_flasher_code]
		reg faultmask 0x01
		reg sp 0x20000000
		reg pc $rtl8710_flasher_firmware_ptr
		resume
		rtl8710_flasher_wait
		set id [rtl8710_flasher_mrw [expr {$rtl8710_flasher_buffer + 0x0C}]]
		set rtl8710_flasher_capacity [expr {2 ** [expr {($id >> 16) & 0xFF}]}]
		set rtl8710_flasher_ready 1
		echo "RTL8710 flasher initialized"
	}
	return ""
}

proc rtl8710_flasher_mrw {reg} {
	set value ""
	mem2array value 32 $reg 1
	return $value(0)
}

proc rtl8710_flasher_wait {} {
	global rtl8710_flasher_buffer
	while {[rtl8710_flasher_mrw [expr {$rtl8710_flasher_buffer + 0x00}]]} { }
}

proc rtl8710_flasher_load_block {local_filename offset len} {
	global rtl8710_flasher_buffer
	load_image $local_filename [expr {$rtl8710_flasher_buffer + 0x20 - $offset}] bin [expr {$rtl8710_flasher_buffer + 0x20}] $len
}

proc rtl8710_flasher_read_block {offset len} {
	global rtl8710_flasher_buffer
	global rtl8710_flasher_command_read
	mww [expr {$rtl8710_flasher_buffer + 0x04}] $rtl8710_flasher_command_read
	mww [expr {$rtl8710_flasher_buffer + 0x08}] 0x00000000
	mww [expr {$rtl8710_flasher_buffer + 0x10}] $offset
	mww [expr {$rtl8710_flasher_buffer + 0x14}] $len
	mww [expr {$rtl8710_flasher_buffer + 0x00}] 0x00000001
	rtl8710_flasher_wait
	set status [rtl8710_flasher_mrw [expr {$rtl8710_flasher_buffer + 0x08}]]
	if {[expr {$status > 0}]} {
		error "read error, offset $offset"
	}
}

proc rtl8710_flasher_write_block {offset len} {
	global rtl8710_flasher_buffer
	global rtl8710_flasher_command_write
	mww [expr {$rtl8710_flasher_buffer + 0x04}] $rtl8710_flasher_command_write
	mww [expr {$rtl8710_flasher_buffer + 0x08}] 0x00000000
	mww [expr {$rtl8710_flasher_buffer + 0x10}] $offset
	mww [expr {$rtl8710_flasher_buffer + 0x14}] $len
	mww [expr {$rtl8710_flasher_buffer + 0x00}] 0x00000001
	rtl8710_flasher_wait
	set status [rtl8710_flasher_mrw [expr {$rtl8710_flasher_buffer + 0x08}]]
	if {[expr {$status > 0}]} {
		error "write error, offset $offset"
	}
}

proc rtl8710_flasher_verify_block {offset len} {
	global rtl8710_flasher_buffer
	global rtl8710_flasher_command_verify
	mww [expr {$rtl8710_flasher_buffer + 0x04}] $rtl8710_flasher_command_verify
	mww [expr {$rtl8710_flasher_buffer + 0x08}] 0x00000000
	mww [expr {$rtl8710_flasher_buffer + 0x10}] $offset
	mww [expr {$rtl8710_flasher_buffer + 0x14}] $len
	mww [expr {$rtl8710_flasher_buffer + 0x00}] 0x00000001
	rtl8710_flasher_wait
	set status [rtl8710_flasher_mrw [expr {$rtl8710_flasher_buffer + 0x08}]]
	if {[expr {$status > 0}]} {
		set status [rtl8710_flasher_mrw [expr {$rtl8710_flasher_buffer + 0x0C}]]
		set status [expr {$status + $offset}]
		error "verify error, offset $status"
	}
}

proc rtl8710_flash_read_id {} {
	global rtl8710_flasher_buffer
	global rtl8710_flasher_capacity
	global rtl8710_flasher_command_read_id
	rtl8710_flasher_init
	mww [expr {$rtl8710_flasher_buffer + 0x04}] $rtl8710_flasher_command_read_id
	mww [expr {$rtl8710_flasher_buffer + 0x08}] 0x00000000
	mww [expr {$rtl8710_flasher_buffer + 0x00}] 0x00000001
	rtl8710_flasher_wait
	set id [rtl8710_flasher_mrw [expr {$rtl8710_flasher_buffer + 0x0C}]]
	set manufacturer_id [format "0x%02X" [expr {$id & 0xFF}]]
	set memory_type [format "0x%02X" [expr {($id >> 8) & 0xFF}]]
	set memory_capacity [expr {2 ** [expr {($id >> 16) & 0xFF}]}]
	echo "manufacturer ID: $manufacturer_id, memory type: $memory_type, memory capacity: $memory_capacity bytes"
}

proc rtl8710_flash_mass_erase {} {
	global rtl8710_flasher_buffer
	global rtl8710_flasher_command_mass_erase
	rtl8710_flasher_init
	mww [expr {$rtl8710_flasher_buffer + 0x04}] $rtl8710_flasher_command_mass_erase
	mww [expr {$rtl8710_flasher_buffer + 0x08}] 0x00000000
	mww [expr {$rtl8710_flasher_buffer + 0x00}] 0x00000001
	rtl8710_flasher_wait
}

proc rtl8710_flash_sector_erase {offset} {
	global rtl8710_flasher_buffer
	global rtl8710_flasher_command_sector_erase
	rtl8710_flasher_init
	mww [expr {$rtl8710_flasher_buffer + 0x04}] $rtl8710_flasher_command_sector_erase
	mww [expr {$rtl8710_flasher_buffer + 0x08}] 0x00000000
	mww [expr {$rtl8710_flasher_buffer + 0x10}] $offset
	mww [expr {$rtl8710_flasher_buffer + 0x00}] 0x00000001
	rtl8710_flasher_wait
}

proc rtl8710_flash_read {local_filename loc size} {
	global rtl8710_flasher_buffer
	global rtl8710_flasher_buffer_size
	rtl8710_flasher_init
	for {set offset 0} {$offset < $size} {set offset [expr {$offset + $rtl8710_flasher_buffer_size}]} {
		set len [expr {$size - $offset}]
		if {[expr {$len > $rtl8710_flasher_buffer_size}]} {
			set len $rtl8710_flasher_buffer_size
		}
		set flash_offset [expr {$loc + $offset}]
		echo "read offset $flash_offset"
		rtl8710_flasher_read_block $flash_offset $len
		dump_image /tmp/_rtl8710_flasher.bin [expr {$rtl8710_flasher_buffer + 0x20}] $len
		exec dd conv=notrunc if=/tmp/_rtl8710_flasher.bin "of=$local_filename" bs=1 "seek=$offset"
		echo "read $len bytes"
	}
}

proc rtl8710_flash_write {local_filename loc} {
	global rtl8710_flasher_buffer_size
	global rtl8710_flasher_sector_size
	global rtl8710_flasher_auto_erase
	global rtl8710_flasher_auto_verify
	global rtl8710_flasher_auto_erase_sector
	rtl8710_flasher_init
	set sector 0
	set size [file size $local_filename]
	for {set offset 0} {$offset < $size} {set offset [expr {$offset + $rtl8710_flasher_buffer_size}]} {
		set len [expr {$size - $offset}]
		if {[expr {$len > $rtl8710_flasher_buffer_size}]} {
			set len $rtl8710_flasher_buffer_size
		}
		set flash_offset [expr {$loc + $offset}]
		echo "write offset $flash_offset"
		rtl8710_flasher_load_block $local_filename $offset $len
		if {[expr {$rtl8710_flasher_auto_erase != 0}]} {
			for {set i $flash_offset} {$i < [expr {$flash_offset + $len}]} {incr i} {
				set sector [expr {$i / $rtl8710_flasher_sector_size}]
				if {[expr {$rtl8710_flasher_auto_erase_sector != $sector}]} {
					echo "erase sector $sector"
					rtl8710_flash_sector_erase [expr {$sector * $rtl8710_flasher_sector_size}]
					set rtl8710_flasher_auto_erase_sector $sector
				}
			}
		}
		rtl8710_flasher_write_block $flash_offset $len
		echo "wrote $len bytes"
		if {[expr {$rtl8710_flasher_auto_verify != 0}]} {
			echo "verify offset $flash_offset"
			rtl8710_flasher_verify_block $flash_offset $len
		}
	}
}

proc rtl8710_flash_verify {local_filename loc} {
	global rtl8710_flasher_buffer_size
	rtl8710_flasher_init
	set size [file size $local_filename]
	for {set offset 0} {$offset < $size} {set offset [expr {$offset + $rtl8710_flasher_buffer_size}]} {
		set len [expr {$size - $offset}]
		if {[expr {$len > $rtl8710_flasher_buffer_size}]} {
			set len $rtl8710_flasher_buffer_size
		}
		set flash_offset [expr {$loc + $offset}]
		echo "read offset $flash_offset"
		rtl8710_flasher_load_block $local_filename $offset $len
		echo "verify offset $flash_offset"
		rtl8710_flasher_verify_block $flash_offset $len
	}
}

proc rtl8710_flash_read_mac {} {
	global rtl8710_flasher_mac_address_offset
	global rtl8710_flasher_buffer
	rtl8710_flasher_init
	rtl8710_flasher_read_block $rtl8710_flasher_mac_address_offset 6
	set mac ""
	mem2array mac 8 [expr {$rtl8710_flasher_buffer + 0x20}] 6
	set res "MAC address: "
	append res [format %02X $mac(0)]
	append res ":" [format %02X $mac(1)]
	append res ":" [format %02X $mac(2)]
	append res ":" [format %02X $mac(3)]
	append res ":" [format %02X $mac(4)]
	append res ":" [format %02X $mac(5)]
	echo $res
}

proc rtl8710_flash_auto_erase {on} {
	global rtl8710_flasher_auto_erase
	if {[expr {$on != 0}]} {
		set rtl8710_flasher_auto_erase 1
		echo "auto erase on"
	} else {
		set rtl8710_flasher_auto_erase 0
		echo "auto erase off"
	}
}

proc rtl8710_flash_auto_verify {on} {
	global rtl8710_flasher_auto_verify
	if {[expr {$on != 0}]} {
		set rtl8710_flasher_auto_verify 1
		echo "auto verify on"
	} else {
		set rtl8710_flasher_auto_verify 0
		echo "auto verify off"
	}
}

proc rtl8710_reboot {} {
	mww 0xE000ED0C 0x05FA0007
}

